module Player

open "UnityEngine.dll"
open UnityEngine

entity Player = {
  Num : int
  Equip : Equipment
  ref Controllers : [ControllerRazor]

  Create(id : int) = 
  {
    Num = id
    Equip = new Equipment()
    Controllers = [new ControllerRazor("Hydra1 - Right"); new ControllerRazor("Hydra1 - Left")]
  }
}

entity Equipment = {
  inherit UnityEquipment

  ref AllGuns : [Gun]
  ActiveGuns : [Gun]
  ref NotActiveGuns : [Gun]
  GunControllerPressed : Option<Gun>

  ActiveFlashs : [Light]
  ref NotActiveFlashs : [Light]
  ref AllFlashs : [Light]
  LightControllerPressed : Option<Light>

  ref AllAmmo : [Ammo]

  rule Position = 
    yield world.Jeep.Value.InputPosition

  rule NotActiveFlashs, sap = 
    wait AllFlashs.Count > 0 
    Debug.Log("change for flashs")
    let j = 
      [for a in AllFlashs do
       where (not ActiveFlashs.Contains(a))
       select a]
    let rig = 
      [for a in ActiveFlashs do
       where (a.LightController.JoystickName <> "Hydra1 - Left")
       select a]
    let right = if rig.Count > 0 then true else false
    let lef = 
      [for a in ActiveFlashs do
       where (a.LightController.JoystickName <> "Hydra1 - Right")
       select a]
    let left = if lef.Count > 0 then true else false
    yield j, [right;left]
    wait GunControllerPressed.IsSome || LightControllerPressed.IsSome || world.W_Refill_Resources

  rule NotActiveGuns, asdf = 
    wait GunControllerPressed.IsSome || LightControllerPressed.IsSome
    let r = 
      [for a in AllGuns do
       where (not ActiveGuns.Contains(a))
       select a]
    let fdsa = 
      [for a in r do
       select ("Nummer:" + a.GunNumber + " Controller:" + a.GunController.JoystickName)]
    yield r, fdsa

  rule ActiveGuns, ActiveFlashs = 
    wait GunControllerPressed.IsSome || LightControllerPressed.IsSome
    let Joystickname = if (GunControllerPressed.IsSome) then GunControllerPressed.Value.GunController.JoystickName else LightControllerPressed.Value.LightController.JoystickName
    let Operation = if (GunControllerPressed.IsSome) then GunControllerPressed.Value.GunController.ECB else LightControllerPressed.Value.LightController.ECB
    let GunNumber = if (GunControllerPressed.IsSome) then GunControllerPressed.Value.GunNumber else 0
    let OldActiveGun = 
      [for a in ActiveGuns do
       where (a.GunController.JoystickName <> Joystickname)
       select a]
    let OldActiveFlash = 
      [for a in ActiveFlashs do
       where (a.LightController.JoystickName <> Joystickname)
       select a]
    if GunControllerPressed.IsSome then
      let changingjoystick = 
        [for a in AllGuns do
        where (a.GunController.JoystickName = Joystickname)
        select a]
      let Listsize = changingjoystick.Count
      
      if Operation = "other" then
        let changingLight = 
          [for a in AllFlashs do
           where (a.LightController.JoystickName = Joystickname)
           select a]
        if OldActiveFlash.Count > 0 then
          Debug.Log("Max 1 flashlight allowed")
          yield ActiveGuns, [OldActiveFlash.Head]
        else
          let NewActiveFlash = changingLight.Head
          yield OldActiveGun, [NewActiveFlash]

      if Operation = "next" then
        let nextGunNumber = (GunNumber + 1) % Listsize
        let check = 
          [for a in ActiveGuns do
           where (a.GunNumber = nextGunNumber)
           select a]
        if check.Count > 0 then
          let othernumber = (GunNumber + 2) % Listsize
          let newActiveGun = //newActiveGun
            [for a in changingjoystick do 
             where (a.GunNumber = othernumber)
             select a]
          if Joystickname = TransformHR.name then
            if OldActiveGun.Count > 0 then
              yield [newActiveGun.Head;OldActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs
          else 
            if OldActiveGun.Count > 0 then
              yield [OldActiveGun.Head;newActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs
        else
          let newActiveGun = //newActiveGun
            [for a in changingjoystick do 
             where (a.GunNumber = nextGunNumber)
             select a]
          if Joystickname = TransformHR.name then
            if OldActiveGun.Count > 0 then
              yield [newActiveGun.Head;OldActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs
          else 
            if OldActiveGun.Count > 0 then
              yield [OldActiveGun.Head;newActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs

      if Operation = "prev" then
        let prevGunNumber = ((GunNumber + Listsize) - 1) % Listsize
        let check = 
          [for a in ActiveGuns do
           where (a.GunNumber = prevGunNumber)
           select a]
        if check.Count > 0 then
          let othernumber = ((GunNumber + Listsize) - 2) % Listsize
          let newActiveGun = 
            [for a in changingjoystick do 
             where (a.GunNumber = othernumber)
             select a]
          if Joystickname = TransformHR.name then
            if OldActiveGun.Count > 0 then
              yield [newActiveGun.Head;OldActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs
          else 
            if OldActiveGun.Count > 0 then
              yield [OldActiveGun.Head;newActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs
        else
          let newActiveGun = 
            [for a in changingjoystick do 
             where (a.GunNumber = prevGunNumber)
             select a]
          if Joystickname = TransformHR.name then
            if OldActiveGun.Count > 0 then
              yield [newActiveGun.Head;OldActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs
          else 
            if OldActiveGun.Count > 0 then
              yield [OldActiveGun.Head;newActiveGun.Head], ActiveFlashs
            else
              yield [newActiveGun.Head], ActiveFlashs

    if LightControllerPressed.IsSome then
      let changingjoystick = 
        [for a in AllFlashs do
        where (a.LightController.JoystickName = Joystickname)
        select a]
      let currActiveGunNumber = 
        [for a in ActiveGuns do
         select a.GunNumber]
      if currActiveGunNumber.Count > 0 then
        let newActiveGun = 
          [for a in NotActiveGuns do
           where ((a.GunController.JoystickName = Joystickname) && a.GunNumber <> currActiveGunNumber.Head)
           select a]
        yield [OldActiveGun.Head;newActiveGun.Head], []
      else 
        let NAG = 
          [for a in NotActiveGuns do
           where (a.GunController.JoystickName = Joystickname)
           select a]
        yield [NAG.Head], [OldActiveFlash.Head]

  rule GunControllerPressed, LightControllerPressed = 
    let q = 
      [for a in ActiveGuns do
       where (a.GunController.ECB <> "")
       select a]

    // Light can only change to gun. no other flashlights possible
    let j = 
      [for a in ActiveFlashs do
       where (a.LightController.ECB = "other")
       select a]
    if q.Count > 0 && not (j.Count > 0) then
      yield Some q.Head, None
    if j.Count > 0 && not (q.Count > 0) then
      yield None, Some j.Head
    else
      yield None, None

  rule ActiveGuns, NotActiveGuns, AllGuns, asdf, ActiveFlashs, NotActiveFlashs, AllFlashs = // start!! gun is right, flash is left
    let pl = world.Players.Head.Controllers
    let j = [TransformHR.name;TransformHL.name]
    let x = //right
      [for a in [0..(HR.Count - 1)] do
       select (new Gun(a,pl.Head,j.Head, AllAmmo.[a]))]
    let y = //left
      [for a in [0..(HL.Count - 1)] do
       select (new Gun(a,pl.[1],j.[1], AllAmmo.[a]))]

    let AcCount = 
      [for a in ActiveGuns do
       select (a.GunNumber)]
    let ac = if (AcCount.Count <> 0) then (AcCount) else ([])
    let AllGunslist = x @ y

    if ac.Count = 2 then
      Debug.Log("2 guns")
      let z = [flashL.name;flashR.name]
      let NAF = [new Light(pl.[0]);new Light(pl.[1])]

      let AG = [AllGunslist.[ac.Head]; AllGunslist.[ac.[1]]]

      let NotAG = 
        [for a in AllGunslist do
         where (not AG.Contains(a))
         select a]

      let fdsa = 
        [for a in NotAG do
         select ("Nummer:" + a.GunNumber + " Controller:" + a.GunController.JoystickName)]
      yield AG, NotAG, AllGunslist, fdsa, [], NAF, NAF
      wait world.W_Refill_Resources

    if ac.Count = 1 then

      let gunhand = 
        [for a in ActiveGuns do
         select (a.GunController.JoystickName)]

      let AG = if gunhand.Head <> "Hydra1 - Left" then [AllGunslist.[ac.Head]] else [AllGunslist.[(ac.Head+HR.Count)]]

      let NotAG = 
        [for a in AllGunslist do
         where (not AG.Contains(a))
         select a]
      let z = [flashL.name;flashR.name]

      let AF = if gunhand.Head <> "Hydra1 - Left" then [new Light(pl.[1])] else [new Light(pl.[0])]
      let NAF = if gunhand.Head = "Hydra1 - Left" then [new Light(pl.[0])] else [new Light(pl.[1])]
      let AllF = AF @ NAF

      let fdsa = 
        [for a in NotAG do
         select ("Nummer:" + a.GunNumber + " Controller:" + a.GunController.JoystickName)]
      yield AG, NotAG, AllGunslist, fdsa, AF, NAF, AllF
      wait world.W_Refill_Resources

    else
      let AG = [AllGunslist.[0]]

      let NotAG = 
        [for a in AllGunslist do
         where (not AG.Contains(a))
         select a]

      let AF = [new Light(pl.[1])]
      let NAF = [new Light(pl.[0])]
      let AllF = AF @ NAF

      let fdsa = 
        [for a in NotAG do
         select ("Nummer:" + a.GunNumber + " Controller:" + a.GunController.JoystickName)]
      yield AG, NotAG, AllGunslist, fdsa, AF, NAF, AllF
      wait world.W_Refill_Resources

  rule AllAmmo = 
    let j = 
      [for a in Ammos do
       select (new Ammo(a.Item1,a.Item2))]
    yield j
    wait world.W_Refill_Resources

  Create() = 
  {
    Base = UnityEquipment.Instantiate() // send list of bullets to instantiate.
    ActiveGuns = []
    NotActiveGuns = []
    GunControllerPressed = None
    LightControllerPressed = None
    AllGuns = []
    ActiveFlashs = []
    NotActiveFlashs = []
    AllFlashs = []
    AllAmmo = []
  } 
}

entity ControllerRazor= {
  inherit SixenseHand
  other : bool
  next : bool
  prev : bool
  JoystickName : string
  ECB : string
  

  rule m_initialRot = 
    yield world.Jeep.Value.Rotation

  rule Shot = 
    wait world.Jeep.Value.Invullen <> true
    if (Trigger || Input.GetMouseButtonDown(0)) then
      yield true
    else
      yield false

  rule Trigger =
    yield Trigger

  rule Bumper =
    yield Bumper

  rule ECB = 
    if prev then
      yield "prev"
    if next then
      yield "next"
    if other then
      yield "other"
    else
      yield ""

  rule other = 
    wait Twee
    yield true
    yield true
    yield false
    wait not Twee

  rule prev = 
    wait Drie
    yield true
    yield true
    yield false
    wait not Drie

  rule next = 
    wait Vier
    yield true
    yield true
    yield false
    wait not Vier

  Create(joystickName : string) = 
  {
    Base = SixenseHand.Instantiate(joystickName)
    JoystickName = joystickName
    next = false
    other = false
    prev = false
    ECB = ""
  }
}

entity Gun = {
  inherit UnityGun
  GunController : ControllerRazor
  ReloadDuration : float
  MagazineSize : int
  Automatic : bool
  DamagePerBullet : float
  GNotInMagazine : int
  GInMagazine : int
  TypeWeapon : string
  GunNumber : int
  AmmoAct : Ammo 
  Reloading : bool
  BazookaBullets : [BazookaBullet]

  rule GunDamage =
    yield DamagePerBullet
    wait false

  rule Shoot =  
   wait GunController.Shot && TypeWeapon <> "Bazooka"
   if (AmmoAct.InMagazine > 0 && not AmmoAct.Reloading) then
     if (not Automatic) then 
       yield true
       yield false
       wait not GunController.Shot
     else
       while (GunController.Shot && AmmoAct.InMagazine > 0) do
         yield true
         yield false
         wait 0.05f // Rate of fire

  rule Shoot, BazookaBullets =
    wait GunController.Shot && TypeWeapon = "Bazooka"
    if (KeyboardShooting && AmmoAct.InMagazine > 0 && not AmmoAct.Reloading) then
      let camera = UnityEngine.Camera.main
      let Ray = camera.ScreenPointToRay(Input.mousePosition)
      yield true, new BazookaBullet(Ray.origin, Ray.direction, AmmoAct.ExplosionForce, AmmoAct.ExplosionRadius, AmmoAct.ExplosionUpwardForce, DamagePerBullet) :: BazookaBullets
      yield false, BazookaBullets  
      wait not GunController.Shot
    elif(not KeyboardShooting && AmmoAct.InMagazine > 0 && not AmmoAct.Reloading) then
      let razer = Razer 
      let razerDirection = razer.transform.forward
      let razerPosition = razer.transform.position
      yield true, new BazookaBullet(razerPosition+razerDirection*1.2f,razerDirection, AmmoAct.ExplosionForce, AmmoAct.ExplosionRadius, AmmoAct.ExplosionUpwardForce, DamagePerBullet) :: BazookaBullets
      yield false, BazookaBullets
      wait not GunController.Shot

  rule BazookaBullets =
    let undestroyedBullets =
      [for a in BazookaBullets do
       where(a.Destroyed = false)
       select a]
    yield undestroyedBullets

  rule AmmoAct.Reloading = 
    if (Input.GetKey(KeyCode.R)) then
      yield true
      wait not Reloading
    else 
      yield false

  rule KeyboardShooting =
    wait Input.GetKeyDown(KeyCode.U) //Determine shooting with the mouse or the razer
    if KeyboardShooting then
      Debug.Log("Razer shooting activated")
      yield not KeyboardShooting
    else
      Debug.Log("Mouse shooting activated")
      yield not KeyboardShooting


  // TODO MAGAZINEGUI not working
  //rule MagazineGUI = 
    //let a = InMag
    //wait InMag <> a
    //yield ""

  rule InMag, NotInMag = 
    //Debug.Log("GunNumber = "+GunNumber+ "   ammo = "+AmmoAct.InMagazine)
    yield AmmoAct.InMagazine, AmmoAct.NotInMagazine

  rule Reloading = 
    if Input.GetKey(KeyCode.C) then
      yield false
    if AmmoAct.Reloading = false then
      yield false

  rule AmmoAct.Automatic, AmmoAct.ReloadDuration, AmmoAct.MagazineSize, AmmoAct.TypeWeapon = 
    yield Automatic, ReloadDuration, MagazineSize, TypeWeapon
    wait false

  rule AmmoAct.GC = 
    yield Some GunController
     
  Create(ind : int, GC : ControllerRazor, tr : string, am : Ammo) = 
  let autom = if (ind <> 0) then false else true
  let stlist =             ["MachineGun";"Pistol" ;"ShotGun"; "Bazooka"]
  let ClipSizeList =       [150         ; 20      ;    5    ; 1]
  let ReloadDurationList = [7.0f        ; 3.0f    ;  0.5f   ; 0.5f]
  let DamageList =         [40.0f       ; 75.0f   ; 135.0f  ; 135.0f]
  let nam = stlist.[ind]
  {
    Base = UnityGun.Instantiate(nam, tr)
    TypeWeapon = nam 
    GunController = GC
    GNotInMagazine = 0
    MagazineSize = ClipSizeList.[ind]
    GInMagazine = 0
    ReloadDuration = ReloadDurationList.[ind]
    Automatic = autom
    DamagePerBullet = DamageList.[ind]
    GunNumber = ind
    Reloading = false
    AmmoAct = am
    BazookaBullets = []
  }
}
entity Ammo = {
  InMagazine : int
  NotInMagazine : int
  ref GC : Option<ControllerRazor>
  shot : bool
  Automatic : bool
  Reloading : bool
  MagazineSize : int
  ReloadDuration : float
  TypeWeapon : string
  ExplosionForce : float
  ExplosionRadius : float
  ExplosionUpwardForce : float

  rule Reloading, NotInMagazine, InMagazine = 
    wait (InMagazine = 0) || Reloading
    if (NotInMagazine > 0) then
      if (TypeWeapon = "ShotGun") then //single shell reload
        while (NotInMagazine > 0 && InMagazine < (MagazineSize + 1)) do
          let a = NotInMagazine - 1
          let b = InMagazine + 1
          //Debug.Log("update bullets")
          yield true, a,b
          wait ReloadDuration
      else //magazine reload
        yield true, NotInMagazine, InMagazine
        wait (ReloadDuration)
        if MagazineSize > NotInMagazine then // clip can't be fulled completely
          yield false, 0, NotInMagazine
        else
          let changed = (MagazineSize - InMagazine)
          yield false, NotInMagazine - changed, MagazineSize // fill clip completely

  //rule NotInMagazine = 
    //if world.ActiveBoR = "AmmoBox" then 
      //yield NotInMagazine + 50

  rule InMagazine, shot = 
    wait GC.IsSome
    wait GC.Value.Shot
    if (InMagazine > 0 && not Reloading) then
      //Debug.Log(Automatic)
      if (not Automatic) then
        //Debug.Log("InMagazineNotAutom = "+ InMagazine)
        yield InMagazine - 1, true
        yield InMagazine, false
        wait not GC.Value.Shot
      else
        while (GC.Value.Shot && InMagazine > 0) do
          //Debug.Log("InMagazineAutom = "+ InMagazine)
          yield InMagazine - 1, true
          yield InMagazine, false
          wait 0.05f

  Create(InMag : int, NotInMag : int) = {
    InMagazine = InMag
    NotInMagazine = NotInMag
    GC = None
    shot = false
    Automatic = false
    Reloading = false
    ReloadDuration = 0.0f
    MagazineSize = 0
    TypeWeapon = ""
    ExplosionForce = 30.0f
    ExplosionRadius = 30.0f
    ExplosionUpwardForce = 5.0f
  }
}

entity BazookaBullet = {
  inherit UnityBazookaBullet
  cnt : float 
  transforw : Vector3
  explosionForce : float
  explosionRadius : float
  explosionUpwardForce : float
  gunDamage : float

  rule Frce, cnt = 
    while cnt < 40.0f do
      yield transforw, cnt + 10.0f
    wait false

  rule Destroyed =
    wait Destroyed
    yield true

  rule ExplosionForce =
    yield explosionForce
    wait false

  rule ExplosionRadius =
    yield explosionRadius
    wait false

  rule ExplosionUpwardForce =
    yield explosionUpwardForce
    wait false

  rule GunDamage =
    yield gunDamage
    wait false

  Create(pos : Vector3, directi : Vector3, force : float, radius : float, upwardForce : float, damage : float) = 
  {
    Base= UnityBazookaBullet.Instantiate(pos, "BazookaBullet", force, radius, upwardForce, damage)
    cnt = 0.0f
    transforw = directi
    explosionForce = force
    explosionRadius = radius
    explosionUpwardForce = upwardForce
    gunDamage = damage
  }
}

entity Light = {
  LightController : ControllerRazor
  Battery : float
  Active : bool
  
  rule Battery = 
     if world.ActiveBoR = "Battery Black" then 
       Debug.Log("Battery = "+Battery)
       yield Battery + 50.0f
    
  rule Battery = 
    //Debug.Log("Battery: " + Battery)
    if Active && Battery > 0.49f then
      yield Battery - 0.5f
    else
      yield Battery

  rule Active =
    yield LightController.Trigger

  Create(LC : ControllerRazor) = 
  {
    LightController = LC
    Battery = 100.0f
    Active = false
  }
}
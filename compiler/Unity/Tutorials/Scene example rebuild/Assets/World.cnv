module Game

open "UnityEngine.dll"
open UnityEngine

worldEntity World = {
  inherit UnityLandscape
  Landscapes : [Landscape]
  Jeep : Truck
  Zombies : [Zombie] // are created in the landscape in groups
  Pistols : [Gun]
  Flashs : [Light]
  GUIpanel : GUI
  Health : float
  ActiveBoR : string

  rule Zombies = 
    let groups = 
      [for a in Landscapes do
       for b in a.Group do
       select b]
    let zombiegroup = 
      [for a in groups do
       for c in a.ZombieFollowers do
	     select c]
    let groupleader = 
      [for a in groups do
       where a.ZombieLeader.IsSome
       let z = a.ZombieLeader.Value
       select z]
    let group = groupleader @ zombiegroup
    if group.Count > 0 then
      yield group @ Zombies
  
  rule Zombies = 
    let zmbies = 
      [for a in Zombies do
       where (a.Destroyed = false)
       select a]
    //Debug.Log("zombies count = "+zmbies.Count)
    yield zmbies

  rule Health = 
    if ActiveBoR = "Medipack Red" then
      yield Health + 20.0f
      Debug.Log(Health)

  rule ActiveBoR = 
    if ActiveBoR = "Crossed Wrenches Red" then
      let resourcelist = ["Medipack Red";"Battery Black";"Jerry Can Green"]
      let rnd = Random.Range(0,3)
      yield resourcelist.[rnd]
  
  rule ActiveBoR = 
    let a = 
      [for a in Landscapes do
       for b in a.PickUps do
       for c in b.BonusAndResources do
       where c.Active
       select (c.NameOfBoR)]
    if a.Count > 0 then
      Debug.Log(a.Head)
      yield a.Head
      yield ""

  rule Landscapes = 
    let ls = 
      [for a in Landscapes do
       select a]
    if ls.Count > 0 then
      let Headpos = ls.Head.Position
      let randr = Random.Range(1,5) 
      yield (new Landscape(new Vector3(0.0f,0.0f,Headpos.z - 80.0f), randr)) :: Landscapes
      wait (Vector3.Distance(Headpos, Jeep.Position) < 200.0f)

  Create() =
    {
     Landscapes = [new Landscape(new Vector3(0.0f,0.0f,-160.0f), 1); new Landscape(new Vector3(0.0f,0.0f,-80.0f), (4)); new Landscape((Vector3.zero), (2))]
     Jeep = new Truck()
     Zombies = []
     Pistols = [new Gun()]
     Flashs = [new Light()]
     GUIpanel = new GUI()
     Health = 100.0f
     ActiveBoR = ""
    }
}

entity GroupZombie = { 
  inherit UnityGroup
  ZombieFollowers : [Zombie]
  ZombieLeader : Option<Zombie>

  rule ZombieLeader = 
    let leader = new Zombie(U_ZombieLeader)
    yield Some leader
    yield None
    wait false

  rule ZombieFollowers = 
    let z = 
      [for a in U_Zombies do
       select (new Zombie(a))] 
    yield z
    yield []
    wait false


  Create(sps : Vector3) =
  {
    Base = UnityGroup.Instantiate(sps)
    ZombieFollowers = []
    ZombieLeader = None
  }
}

entity ControllerRazor= { // one hand
  inherit SixenseHand
  
  rule Trigger =
    yield Trigger

  rule Bumper =
    yield Bumper

  Create(joystickName : string) = 
  {
    Base = SixenseHand.Instantiate(joystickName)
  }
}

entity Gun = { //pistol
  GunController : ControllerRazor
  NotInMagazine : int
  Reloading : bool
  ReloadDuration : float
  InMagazine : int
  MagazineSize : int

  rule InMagazine = 
    //Debug.Log("InMagazine left = "+ InMagazine)
    if GunController.Trigger && InMagazine > 0 && (Reloading = false) then
      yield InMagazine - 1
      wait (not GunController.Trigger) 

  rule NotInMagazine = 
    if world.ActiveBoR = "AmmoBox" then 
      yield NotInMagazine + 50
      Debug.Log("NotInMagazine = "+ NotInMagazine)

  rule Reloading, InMagazine, NotInMagazine = 
    if Input.GetKey(KeyCode.R) && NotInMagazine > 0 then // if reloading and available bullets
      yield true, InMagazine, NotInMagazine
      wait (ReloadDuration)
      if MagazineSize > NotInMagazine then // clip can't be fulled completely
        yield false, NotInMagazine, 0
      else 
        yield false, MagazineSize, NotInMagazine - MagazineSize // fill clip completely

  rule Reloading = 
    if Input.GetKey(KeyCode.C) then
      yield false

  Create() = 
  {
    GunController = new ControllerRazor("Hydra1 - Right")//righthand
    NotInMagazine = 200 //amount of bullets
    Reloading = false
    MagazineSize = 80
    InMagazine = 20
    ReloadDuration = 4.0f
  }
}

entity Light = { //flashlight
  LightController : ControllerRazor
  Battery : float
  Active : bool
  
  rule Active =
    yield LightController.Trigger

  rule Battery = 
     if world.ActiveBoR = "Battery Black" then 
       Debug.Log("Battery = "+Battery)
       yield Battery + 50.0f
    
  rule Battery = 
    //Debug.Log("Battery: " + Battery)
    if Active && Battery > 0.49f then
      yield Battery - 0.5f
    else
      yield Battery

  Create() = 
  {
    LightController = new ControllerRazor("Hydra1 - Left")//lefthand
    Battery = 100.0f
    Active = false
  }
}

entity GUI = { //panel. Each wall contains the same info?
  inherit GUIBarScript

  rule Value =
    yield Mathf.Min(world.Jeep.CarHP2, Value)

  Create() = 
  {
    Base = GUIBarScript.Find()
  }

}

entity Landscape = { //here are the zombies created and destroyed after a frame
  inherit UnityLandscape
  Group : [GroupZombie]
  PickUps : [PickUp]
  Spawnpoints : [Transform]

  rule Group, PickUps, Spawnpoints = // spawning multiple groups on a single landscape
    wait Spawnpoints.Count > 0
    let random_spawnp = Random.Range(0,4) 
    let random_pickup = Random.Range(0,4)
    if random_spawnp <> random_pickup then
      let sps = Spawnpoints.[random_spawnp]
      let sps_pos = sps.position
      let rpu = Spawnpoints.[random_pickup]
      let rpu_pos = rpu.position
      yield [new GroupZombie(sps_pos)], [new PickUp(rpu_pos)], []
      wait false
    else 
      let sps1 = Spawnpoints.[1]
      let sps_pos1 = sps1.position
      let rpu1 = Spawnpoints.[2]
      let rpu_pos1 = rpu1.position
      yield [new GroupZombie(sps_pos1)], [new PickUp(rpu_pos1)], []
      wait false

  rule Spawnpoints = 
    let sps = //[Transform of each Spawnpoint]
      [for a in Spawnpoints2 do
       select a]
    yield sps
    wait false

  Create(pos : Vector3, ps : int) =
  {
  Base = UnityLandscape.Instantiate(pos, ps)
  Spawnpoints = []
  Group = []
  PickUps = []
  }
}

entity PickUp = {
  inherit UnityPickUp
  BonusAndResources : [BonusAndResource]
  BARpos : Vector3

  rule BonusAndResources = 
    let amount = 
      [for a in BonusAndResources do
       where (a.Destroyed = false)
       select a]
    yield amount

  rule BonusAndResources = 
    wait Shuffled.Count > 0
    let p0 = BARpos
    let p1 = BARpos - new Vector3(2.0f,0.0f,0.0f)
    let p2 = BARpos + new Vector3(2.0f,0.0f,0.0f)
    let p3 = BARpos - new Vector3(4.0f,0.0f,0.0f)
    let plist = [p0;p1;p2;p3]
    let Slist = Shuffled
    let BAR = 
      [for a in [0..3] do
       select (new BonusAndResource(plist.[a], Slist.[a]))]
    yield BAR
    wait false

  rule Shuffled = 
    let BARlist = ["AmmoBox";"Crossed Wrenches Red";"Medipack Red";"Battery Black";"Jerry Can Green";"Lightning Blue";"Arrows Green";"Bomb Red";"Shield Metal";"Star Red"]
    yield BARlist
    wait false

  Create(pos : Vector3) = 
  {
    BARpos = pos
    BonusAndResources = []
  }
}
entity BonusAndResource = {
  inherit UnityBonusResource
  NameOfBoR : string
  Active : bool

  rule Active, Destroyed = 
    if collids then 
      yield true, false
      yield true, true

  Create(pos : Vector3, bonus : string) = 
  {
    Base = UnityBonusResource.Instantiate(pos,bonus)
    NameOfBoR = bonus
    Active = false;
  }
}
entity Truck = {
   inherit TruckScript
   Fuel : float
   AxleInfos : [AxleInfo]
   maxMotorTorque : float
   maxSteeringAngle : float
   cnvAccel : float // has to be a value between 0.0f and 1.0f
   Rotation : float // has to be a value between -1.0f and 1.0f
   Active : bool
   Keyboard : bool

   rule HeadlightLeftOn, HeadlightRightOn = 
     if world.ActiveBoR = "Lightning Blue" then
       yield true, true
       wait 5.0f
       yield false, false
       wait 0.2f
       yield true, true
       wait 0.1f
       yield false, false
       wait 0.3f
       yield true, true
     else 
       yield false, false
   
   rule CenterOfMass = 
     yield new Vector3(1.0f,0.0f,-1.5f)
     wait false

   rule InMag, NotInMag = 
     yield world.Pistols.Head.InMagazine, world.Pistols.Head.NotInMagazine

   rule MagazineGUI = 
     yield MagazineGUI

   rule Keyboard = 
      wait Input.GetKeyDown(KeyCode.P)
      yield not Keyboard

   rule cnvAccel = 
      if Keyboard then
        yield Input.GetAxis("Vertical")
      else
        if Acceleration <> 0.0f then 
          yield Acceleration
        else
          yield BrakeAndReverse * -1.0f

   rule Rotation = 
      if Keyboard then
        yield Input.GetAxis("Horizontal")
      else
        yield Steering

   rule Fuel = 
     if world.ActiveBoR = "Jerry Can Green" then 
       Debug.Log("Fuel = "+Fuel)
       yield Fuel + 2000.0f

   Create()=
    {
      Base = TruckScript.Instantiate()
      maxMotorTorque = 250.0f
      maxSteeringAngle = 50.0f
      AxleInfos = [new AxleInfo(FrontLeftWheel,FrontRightWheel,true,true);new AxleInfo(RearLeftWheel,RearRightWheel,true,false)] // FWD
      Fuel = 4000.0f // gas liters
      cnvAccel = 0.0f
      Rotation = 0.0f
      Active = true;
      Keyboard = false;
    }
}

entity AxleInfo = {

  leftWheel : WheelCollider
  rightWheel : WheelCollider
  motor : bool
  steering : bool

  rule leftWheel.steerAngle, rightWheel.steerAngle =
    wait steering
    let steeringAngle = world.Jeep.maxSteeringAngle * world.Jeep.Rotation
    yield steeringAngle, steeringAngle

  rule leftWheel.motorTorque, rightWheel.motorTorque, world.Jeep.Fuel =
    if world.Jeep.Fuel > 0.99f then
      if (world.Jeep.Active && world.Jeep.cnvAccel <> 0.0f) && (leftWheel.isGrounded || rightWheel.isGrounded) then
        let dir = world.Jeep.cnvAccel
        let speed = world.Jeep.maxMotorTorque * world.Jeep.cnvAccel * -1.0f
        if (world.ActiveBoR = "Arrows Green") then 
          yield leftWheel.motorTorque, rightWheel.motorTorque, world.Jeep.Fuel
          .| (world.Jeep.cnvAccel <> dir) =>
            yield speed, speed, world.Jeep.Fuel - 1.0f
          .| _ =>
            yield speed * 10.0f, speed * 10.0f, world.Jeep.Fuel
            wait 2.0f
        else
          yield speed, speed, world.Jeep.Fuel - 1.0f
      else
        yield 0.0f,0.0f, world.Jeep.Fuel
    else
      yield 0.0f,0.0f,0.0f

  Create(lW : WheelCollider, rW : WheelCollider, m : bool, s: bool)=
  {
    leftWheel = lW
    rightWheel = rW
    motor = m
    steering = s
  }
}

entity Zombie = {
  inherit UnityZombie
  Life : float

  rule Destroyed = 
    wait dead2
    wait 3.0f
    yield true

  rule Life = 
    if (OnMouseOver && world.Pistols.Head.GunController.Trigger) then
      if Life > 0.49f then 
        yield Life - 40.0f
      else
	      yield 0.0f

  rule shot, dead2 = 
    if Life < 0.0f then
      yield true, true

  Create(trans : Transform) = 
  {
  Base = UnityZombie.Find(trans)
  Life = 100.0f // healthpoints
  }
}
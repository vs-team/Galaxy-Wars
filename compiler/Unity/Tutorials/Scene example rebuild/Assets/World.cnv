module Game

open "UnityEngine.dll"
open UnityEngine
// !!!!BEFORE!!!! compiling, make sure to comment the specified lines in UnityZombie2.cs. When CNV has compiled, uncomment these lines again.
worldEntity World = {
  inherit UnityLandscape
  Landscapes : [Landscape]
  Jeep : Option<Truck>
  Zombies : [Zombie] // are created in the landscape in groups
  Pistols : [Gun]
  Flashs : [Light]
  GUIpanel : GUI
  ActiveBoR : string
  Counter : int
  Gasstations : [Gasstation]
  Bullets : [Bullet]
  Controllers : [ControllerRazor]
  
  rule Bullets = 
    if (Pistols.Head.Shoot && Pistols.Head.TypeWeapon = "Bazooka") then
      Debug.Log("Bazooka shot")
      let Bazpos = Pistols.Head.WorldPos
      yield [new Bullet(Bazpos, Pistols.Head.directio)]

  rule Zombies = 
    let groups = 
      [for a in Landscapes do
       for b in a.Group do
       select b]
    let zombiegroup = 
      [for a in groups do
       for c in a.ZombieFollowers do
	     select c]
    let groupleader = 
      [for a in groups do
       where a.ZombieLeader.IsSome
       let z = a.ZombieLeader.Value
       select z]
    let group = groupleader @ zombiegroup
    if group.Count > 0 then
      yield group @ Zombies
  
  rule Zombies = 
    let zmbies = 
      [for a in Zombies do
       where (a.Destroyed = false)
       select a]
    //Debug.Log("zombies count = "+zmbies.Count)
    yield zmbies

  rule ActiveBoR = 
    if ActiveBoR = "Crossed Wrenches Red" then
      let resourcelist = ["Medipack Red";"Battery Black";"Jerry Can Green"]
      let rnd = Random.Range(0,3)
      yield resourcelist.[rnd]
  
  rule ActiveBoR = 
    let a = 
      [for a in Landscapes do
       for b in a.PickUps do
       for c in b.BonusAndResources do
       where c.Active
       select (c.NameOfBoR)]
    if a.Count > 0 then
      Debug.Log(a.Head)
      yield a.Head
      yield ""

  rule Landscapes, Counter, Gasstations  = 
    let ls = 
      [for a in Landscapes do
       select a]
    let gs = 
      [for b in Gasstations do
       select b]
    if (ls.Count > 0) then
      let randr = Random.Range(1,5) 
      if gs.Count > 0 then 
        let Headpos = if (ls.Head.Position.z < gs.Head.Position.z) then ls.Head.Position else gs.Head.Position
        if Counter > 7 then
          yield Landscapes, 0, new Gasstation(new Vector3(0.0f,0.0f, Headpos.z - 80.0f)) :: Gasstations
          wait (Vector3.Distance(Headpos, Jeep.Value.Position) < 200.0f)
        else
          yield (new Landscape(new Vector3(0.0f,0.0f,Headpos.z - 80.0f), randr)) :: Landscapes, Counter + 1, Gasstations
          yield Landscapes, Counter, Gasstations
          wait (Vector3.Distance(Headpos, Jeep.Value.Position) < 200.0f)
      else 
        let Headpos = ls.Head.Position
        if Counter > 7 then
          yield Landscapes, 0, new Gasstation(new Vector3(0.0f,0.0f, Headpos.z - 80.0f)) :: Gasstations
          wait (Vector3.Distance(Headpos, Jeep.Value.Position) < 200.0f)
        else
          yield (new Landscape(new Vector3(0.0f,0.0f,Headpos.z - 80.0f), randr)) :: Landscapes, Counter + 1, Gasstations
          yield Landscapes, Counter, Gasstations
          wait (Vector3.Distance(Headpos, Jeep.Value.Position) < 200.0f)

  rule Pistols, Flashs = 
    wait Jeep.Value.Active
    yield [new Gun("Bazooka",4, Controllers.[0])], [new Light(Controllers.[1])] // new Gun(Pistol) first time. new Gun(Random) after
    wait false

  rule Controllers = 
    wait Jeep.Value.Active
    yield [new ControllerRazor("Hydra1 - Right"); new ControllerRazor("Hydra1 - Left")]
    wait false

  Create() =
    let truk = new Truck("zpickup", new Vector3(0.0f,-6.0f,0.0f), false)
    {
     Landscapes = [new Landscape(new Vector3(0.0f,0.0f,-160.0f), 1); new Landscape((Vector3.zero), (2))] 
     Jeep = Some truk
     Zombies = []
     Pistols = []
     Flashs = []
     GUIpanel = new GUI()
     ActiveBoR = ""
     Counter = 3
     Gasstations = [new Gasstation(new Vector3(0.0f,0.0f, -80.0f))]
     Bullets = []
     Controllers = []
    }
}
entity Bullet = {
  inherit UnityBullet
  cnt : float 
  transforw : Vector3

  rule Frce, cnt = 
    while cnt < 40.0f do
      yield transforw, cnt + 10.0f
    wait false


  Create(pos : Vector3, directi : Vector3) = 
  {
    Base= UnityBullet.Instantiate(pos, "bullet")
    cnt = 0.0f
    transforw = directi
  }
}

entity Gasstation = {
  inherit UnityGasstation

  Create(ps : Vector3) = {
  Base = UnityGasstation.Instantiate(ps)
  }

}

entity GroupZombie = { 
  inherit UnityGroup
  ZombieFollowers : [Zombie]
  ZombieLeader : Option<Zombie>

  rule ZombieLeader = 
    let leader = new Zombie(U_ZombieLeader)
    yield Some leader
    yield None
    wait false

  rule ZombieFollowers = 
    let z = 
      [for a in U_Zombies do
       select (new Zombie(a))] 
    yield z
    yield []
    wait false

  Create(sps : Vector3) =
  {
    Base = UnityGroup.Instantiate(sps)
    ZombieFollowers = []
    ZombieLeader = None
  }
}

entity ControllerRazor= {
  inherit SixenseHand
  
  rule Shot = 
    if (Trigger || Input.GetMouseButtonDown(0)) then
      yield true
    else
      yield false

  rule Trigger =
    yield Trigger

  rule Bumper =
    yield Bumper

  Create(joystickName : string) = 
  {
    Base = SixenseHand.Instantiate(joystickName)
  }
}

entity Gun = {
  inherit UnityGun
  GunController : ControllerRazor
  NotInMagazine : int
  Reloading : bool
  ReloadDuration : float
  InMagazine : int
  MagazineSize : int
  Automatic : bool
  DamagePerBullet : float
  TypeWeapon : string

  rule Shoot = 
   wait GunController.Shot
   if (InMagazine > 0 && not Reloading) then
     Debug.Log("attempting shot")
     if (not Automatic && (GunController.Trigger || Input.GetMouseButtonDown(0))) then
       yield true
       yield false
     if (Automatic && (GunController.Trigger || Input.GetMouseButton(0))) then
       while Input.GetMouseButton(0) do 
         yield true
         yield false
         wait 0.05f

  rule InMagazine = 
    if Shoot then
      yield InMagazine - 1

  rule NotInMagazine = 
    if world.ActiveBoR = "AmmoBox" then 
      yield NotInMagazine + 50

  rule Reloading, NotInMagazine, InMagazine = 
    if ((Input.GetKey(KeyCode.R) || InMagazine = 0) && NotInMagazine > 0) then
      yield true, NotInMagazine, InMagazine
      wait (ReloadDuration)
      if MagazineSize > NotInMagazine then // clip can't be fulled completely
        yield false, 0, NotInMagazine
      else 
        let changed = (MagazineSize - InMagazine)
        yield false, NotInMagazine - changed, MagazineSize // fill clip completely

  rule MagazineGUI = 
    if world.Pistols.Count > 0 then
      yield MagazineGUI

  rule InMag, NotInMag = 
    if world.Pistols.Count > 0 then
      yield InMagazine, NotInMagazine

  rule Reloading = 
    if Input.GetKey(KeyCode.C) then
      let a = Position
      let b = Rotation
      yield false

  rule Rotation, Position = 
    yield Vector3.zero, Vector3.zero  

  Create(st : string, ind : int, GC : ControllerRazor) = 
  let autom = if (st <> "MachineGun") then false else true
  //                        MachineGun ; Pistol; ShotGun ; Revolver; Bazooka
  let InMagList =           [50        ; 20 ;    5       ; 6       ; 0]
  let NotInMagList = [       850       ; 200 ;   60      ; 90      ; 16]
  let ClipSizeList = [       150       ; 20 ;    5       ; 6       ; 1]
  let ReloadDurationList = [ 7.0f      ; 3.0f ;  4.0f    ; 2.0f    ; 5.0f]
  let DamageList = [         40.0f     ; 75.0f ; 135.0f  ; 100.0f  ; 400.0f]
  {
    Base = UnityGun.Instantiate(st)
    TypeWeapon = st
    GunController = GC
    NotInMagazine = NotInMagList.[ind]
    Reloading = false
    MagazineSize = ClipSizeList.[ind]
    InMagazine = InMagList.[ind]
    ReloadDuration = ReloadDurationList.[ind]
    Automatic = autom
    DamagePerBullet = DamageList.[ind]
  }
}

entity Light = {
  LightController : ControllerRazor
  Battery : float
  Active : bool
  
  rule Active =
    yield LightController.Trigger

  rule Battery = 
     if world.ActiveBoR = "Battery Black" then 
       Debug.Log("Battery = "+Battery)
       yield Battery + 50.0f
    
  rule Battery = 
    //Debug.Log("Battery: " + Battery)
    if Active && Battery > 0.49f then
      yield Battery - 0.5f
    else
      yield Battery

  Create(LC : ControllerRazor) = 
  {
    LightController = LC
    Battery = 100.0f
    Active = false
  }
}

entity GUI = { //panel. Each wall contains the same info?
  inherit GUIBarScript

  Create() = 
  {
    Base = GUIBarScript.Find()
  }

}

entity Landscape = { //here are the zombies created and destroyed after a frame
  inherit UnityLandscape
  Group : [GroupZombie]
  PickUps : [PickUp]
  Spawnpoints : [Transform]

  rule Group, PickUps, Spawnpoints = // spawning multiple groups on a single landscape
    wait Spawnpoints.Count > 0
    let random_spawnp = Random.Range(0,4) 
    let random_pickup = Random.Range(0,4)
    if random_spawnp <> random_pickup then
      let sps = Spawnpoints.[random_spawnp]
      let sps_pos = sps.position
      let rpu = Spawnpoints.[random_pickup]
      let rpu_pos = rpu.position
      yield [new GroupZombie(sps_pos)], [new PickUp(rpu_pos)], []
      wait false
    else 
      let sps1 = Spawnpoints.[1]
      let sps_pos1 = sps1.position
      let rpu1 = Spawnpoints.[2]
      let rpu_pos1 = rpu1.position
      yield [new GroupZombie(sps_pos1)], [new PickUp(rpu_pos1)], []
      wait false

  rule Spawnpoints = 
    let sps = //[Transform of each Spawnpoint]
      [for a in Spawnpoints2 do
       select a]
    yield sps
    wait false

  Create(pos : Vector3, ps : int) =
  {
  Base = UnityLandscape.Instantiate(pos, ps)
  Spawnpoints = []
  Group = []
  PickUps = []
  }
}

entity PickUp = {
  inherit UnityPickUp
  BonusAndResources : [BonusAndResource]
  BARpos : Vector3

  rule BonusAndResources = 
    let amount = 
      [for a in BonusAndResources do
       where (a.Destroyed = false)
       select a]
    yield amount

  rule BonusAndResources = 
    wait Shuffled.Count > 0
    let p0 = BARpos
    let p1 = BARpos - new Vector3(2.0f,0.0f,0.0f)
    let p2 = BARpos + new Vector3(2.0f,0.0f,0.0f)
    let p3 = BARpos - new Vector3(4.0f,0.0f,0.0f)
    let plist = [p0;p1;p2;p3]
    let Slist = Shuffled
    let BAR = 
      [for a in [0..3] do
       select (new BonusAndResource(plist.[a], Slist.[a]))]
    yield BAR
    wait false

  rule Shuffled = 
    let BARlist = ["AmmoBox";"Crossed Wrenches Red";"Medipack Red";"Battery Black";"Jerry Can Green";"Lightning Blue";"Arrows Green";"Bomb Red";"Shield Metal";"Star Red"]
    yield BARlist
    wait false

  Create(pos : Vector3) = 
  {
    BARpos = pos
    BonusAndResources = []
  }
}
entity BonusAndResource = {
  inherit UnityBonusResource
  NameOfBoR : string
  Active : bool

  rule Active, Destroyed = 
    if collids then 
      yield true, false
      yield true, true

  Create(pos : Vector3, bonus : string) = 
  {
    Base = UnityBonusResource.Instantiate(pos,bonus)
    NameOfBoR = bonus
    Active = false;
  }
}
entity TruckStats = {
  Health : float
  MaxSpeed : float
  MaxSteering : float
  Hull : float
  Fuel : float
  isModel : bool

  rule Health, world.Jeep.Value.CarHP2 = 
    if world.ActiveBoR = "Medipack Red" && isModel <> true then
      yield Health + 20.0f, ((Health) / 100.0f)

  rule world.Jeep.Value.CarHP2, Health, world.GUIpanel.HPValue = 
    if isModel <> true then
      let z = world.Jeep.Value.CarHP2
      if (z <> (Health / 100.0f)) then
        yield world.Jeep.Value.CarHP2, (world.Jeep.Value.CarHP2 * 100.0f), world.Jeep.Value.CarHP2
      else
        yield (Health / 100.0f), (world.Jeep.Value.CarHP2 * 100.0f), world.Jeep.Value.CarHP2

  Create(bs : bool) = 
  let rnd = Random.Range(0,5)
  let HealthList = [50.0f; 60.0f; 75.0f; 80.0f; 100.0f]
  let MaxSpeedList = [10.0f; 10.0f; 10.0f; 15.0f; 20.0f]
  let MaxSteeringList = [5.0f; 10.0f; 10.0f; 20.0f; 15.0f]
  let HullList = [8.0f; 5.0f ; 3.0f ; 4.0f ; 2.0f]
  let FuelList = [12000.0f ; 8000.0f ; 15000.0f ; 6000.0f ; 10000.0f]
  {
    Health = HealthList.[rnd]
    MaxSpeed = MaxSpeedList.[rnd]
    MaxSteering = MaxSteeringList.[rnd]
    Hull = HullList.[rnd] //damage taken by hull
    Fuel = FuelList.[rnd]
    isModel = bs
  }

}

entity Truck = {
   inherit TruckScript
   Fuel : float
   AxleInfos : [AxleInfo]
   maxMotorTorque : float
   maxSteeringAngle : float
   cnvAccel : float // has to be a value between 0.0f and 1.0f
   JRotation : float // has to be a value between -1.0f and 1.0f
   Keyboard : bool
   isModel : bool
   Active : bool
   Stats : TruckStats

   rule HeadlightLeftOn, HeadlightRightOn = 
     if world.ActiveBoR = "Lightning Blue" then
       yield true, true
       wait 5.0f
       yield false, false
       wait 0.2f
       yield true, true
       wait 0.1f
       yield false, false
       wait 0.3f
       yield true, true
       wait 0.1f
       yield false, false

   rule Keyboard = 
      wait Input.GetKeyDown(KeyCode.P)
      yield not Keyboard

   rule cnvAccel = 
      if Keyboard then
        yield Input.GetAxis("Vertical")
      else
        if Acceleration <> 0.0f then 
          yield Acceleration
        else
          yield BrakeAndReverse * -1.0f

   rule JRotation = 
      if Keyboard then
        yield Input.GetAxis("Horizontal")
      else
        yield Steering

   rule Fuel = 
     if not isModel then 
       if world.ActiveBoR = "Jerry Can Green" then 
         Debug.Log("Fuel = "+Fuel)
         yield Fuel + 2000.0f

   rule Active = 
     yield true
     wait false

   rule AxleInfos = 
     yield [new AxleInfo(FrontLeftWheel,FrontRightWheel,true,true);new AxleInfo(RearLeftWheel,RearRightWheel,true,false)]

   Create(nm : string, pos : Vector3, ModelIs : bool) = 
    {
      Active = false
      isModel = ModelIs
      Base = TruckScript.Instantiate(nm, pos)
      maxMotorTorque = 250.0f
      maxSteeringAngle = 50.0f
      AxleInfos = []
      Fuel = 80000.0f // gas liters
      cnvAccel = 0.0f
      JRotation = 0.0f
      Keyboard = false;
      Stats = new TruckStats(ModelIs)
    }
}

entity AxleInfo = {

  leftWheel : WheelCollider
  rightWheel : WheelCollider
  motor : bool
  steering : bool

  rule steering = 
    yield steering

  rule leftWheel.steerAngle, rightWheel.steerAngle =
    wait steering
    if not world.Jeep.Value.isModel then
      let steeringAngle = world.Jeep.Value.maxSteeringAngle * world.Jeep.Value.JRotation
      if world.Jeep.Value.cnvAccel > 0.0f then
        if ((steeringAngle > 0.001f  && (world.Jeep.Value.RotationY > 30.0f  && world.Jeep.Value.RotationY < 120.0f)) || 
            (steeringAngle < -0.001f && (world.Jeep.Value.RotationY > 200.0f && world.Jeep.Value.RotationY < 330.0f))) then 
          yield 0.0f,0.0f
        else
          yield steeringAngle, steeringAngle
      if world.Jeep.Value.cnvAccel < 0.0f then
        if ((steeringAngle > 0.001f && (world.Jeep.Value.RotationY > 200.0f && world.Jeep.Value.RotationY < 330.0f)) || 
            (steeringAngle < -0.001f && (world.Jeep.Value.RotationY > 30.0f && world.Jeep.Value.RotationY < 120.0f))) then 
          yield 0.0f,0.0f
        else
          yield steeringAngle, steeringAngle

  rule leftWheel.motorTorque, rightWheel.motorTorque, world.Jeep.Value.Fuel =
    if not world.Jeep.Value.isModel then
      if world.Jeep.Value.Fuel > 0.99f then
        if ((world.Jeep.Value.cnvAccel <> 0.0f) && (leftWheel.isGrounded || rightWheel.isGrounded)) then
          let dir = world.Jeep.Value.cnvAccel
          let speed = world.Jeep.Value.maxMotorTorque * world.Jeep.Value.cnvAccel * -1.0f
          if (world.ActiveBoR = "Arrows Green") then 
            yield leftWheel.motorTorque, rightWheel.motorTorque, world.Jeep.Value.Fuel
            .| (world.Jeep.Value.cnvAccel <> dir) =>
              yield speed, speed, world.Jeep.Value.Fuel - 1.0f
            .| _ =>
              yield speed * 10.0f, speed * 10.0f, world.Jeep.Value.Fuel
              wait 2.0f
          else
            yield speed, speed, world.Jeep.Value.Fuel - 1.0f
        else
          yield 0.0f,0.0f, world.Jeep.Value.Fuel
      else
        yield 0.0f,0.0f,0.0f

  Create(lW : WheelCollider, rW : WheelCollider, m : bool, s: bool)=
  {
    leftWheel = lW
    rightWheel = rW
    motor = m
    steering = s
  }
}

entity Zombie = {
  inherit UnityZombie2
  Life : float 

  (*rule Destroyed = 
    wait dead2
    wait 0.8f
    yield true*)

  rule Life, CollisionDamage =
    if (CollisionDamage <> 0.0f) then
      Debug.Log("Collided zombie HP before:" + Life)
      yield Life - (CollisionDamage * 4.0f), 0.0f
      Debug.Log("Collided zombie HP after:" + Life)

  rule CollisionDamage =
    yield CollisionDamage

  rule Life = 
    wait (world.Pistols.Head.TypeWeapon = "Bazooka")
    yield Life 

  rule Life = 
    wait world.Jeep.IsSome
    if (world.Jeep.Value.Active) then
      if OnMouseOver then
        if (not world.Pistols.Head.Automatic) then
          if (world.Pistols.Head.GunController.Trigger || Input.GetMouseButtonDown(0)) then
            Debug.Log(world.Pistols.Head.DamagePerBullet)
            if Life > 0.49f then 
              yield Life - world.Pistols.Head.DamagePerBullet
            else
	            yield 0.0f
        else
          if (world.Pistols.Head.GunController.Shot) then
            if Life > 0.49f then
              yield Life - world.Pistols.Head.DamagePerBullet
            else
              yield 0.0f   

  rule Dead = 
    if (Life < 0.0f) then
      yield true
      wait false

  (*rule shot, dead2 = 
    if Life < 0.0f then
      yield true, true*)

  Create(trans : Transform) = 
  {
  Base = UnityZombie2.Find(trans)
  Life = 100.0f // healthpoints
  }
}